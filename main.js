/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/components/engine.js":
/*!**********************************!*\
  !*** ./src/components/engine.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _loadLevel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadLevel */ \"./src/components/loadLevel.js\");\n/* harmony import */ var _menu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./menu */ \"./src/components/menu.js\");\n\r\n\r\n\r\nconst e = () => {\r\n  const chill = [new Audio('./chill/1.mp3'), new Audio('./chill/2.mp3'), new Audio('./chill/3.mp3'), new Audio('./chill/4.mp3'), new Audio('./chill/5.mp3'), new Audio('./chill/6.mp3'), new Audio('./chill/7.mp3'), new Audio('./chill/8.mp3'), new Audio('./chill/9.mp3'), new Audio('./chill/10.mp3'), new Audio('./chill/11.mp3'), new Audio('./chill/12.mp3')];\r\n\r\n  const manlyTunes = [new Audio('./manly-tunes/1.mp3'), new Audio('./manly-tunes/2.mp3'), new Audio('./manly-tunes/3.mp3'), new Audio('./manly-tunes/4.mp3')];\r\n\r\n  let prevSong;\r\n  let music = 'ON';\r\n  let musicPlaying = false;\r\n\r\n  let currentLevel;\r\n  let difficulty = 0;\r\n\r\n  let snake = 'empty';\r\n  let turnPoints = [];\r\n  let unit;\r\n\r\n  let score = 0;\r\n\r\n  let direction;\r\n  let prevDirection;\r\n\r\n  let speed = 350;\r\n\r\n  let maxScore;\r\n\r\n  const apple = document.createElement('img');\r\n  apple.src = './apple-icon.svg';\r\n  apple.setAttribute('id', 'apple');\r\n\r\n  const gameLostBox = document.querySelector('#game-lost');\r\n  const gameWonBox = document.querySelector('#game-won');\r\n  const restartBtn = document.querySelector('#restart');\r\n  const backToMenuBtn = Array.from(document.querySelectorAll('.back-to-menu'));\r\n  const scoreCounter = document.querySelector('#score>p');\r\n  const continueBtn = document.querySelector('#continue');\r\n  const muteBtn = document.querySelector('#mute-button');\r\n  const quality = document.querySelector('.quality');\r\n  const skip = document.querySelector('.skip');\r\n  const arrows = document.querySelectorAll('.arrows button');\r\n\r\n  continueBtn.onclick = () => {\r\n    snake = 'empty';\r\n    turnPoints = [];\r\n  \r\n    score = 0;\r\n    scoreCounter.textContent = 'Score: 0';\r\n    \r\n    gameWonBox.style.display = 'none';\r\n    _loadLevel__WEBPACK_IMPORTED_MODULE_0__[\"default\"].load(currentLevel + 1);\r\n  };\r\n\r\n  function keydownFn(e) {\r\n    if (e.keyCode == 82) {\r\n      restart();\r\n    };\r\n  };\r\n\r\n  function restart() {\r\n    snake = 'empty';\r\n    turnPoints = [];\r\n  \r\n    score = 0;\r\n    scoreCounter.textContent = 'Score: 0';\r\n  \r\n    window.removeEventListener('keydown', keydownFn);\r\n    gameLostBox.style.display = 'none';\r\n    _loadLevel__WEBPACK_IMPORTED_MODULE_0__[\"default\"].load(currentLevel);\r\n  };\r\n\r\n  restartBtn.onclick = restart;\r\n\r\n  backToMenuBtn.forEach(btn => {\r\n    btn.onclick = () => {\r\n      snake = 'empty';\r\n      turnPoints = [];\r\n    \r\n      score = 0;\r\n      scoreCounter.textContent = 'Score: 0';\r\n      \r\n      gameWonBox.style.display = 'none';\r\n      gameLostBox.style.display = 'none';\r\n      stopMusic();\r\n      _menu__WEBPACK_IMPORTED_MODULE_1__[\"default\"].defaultMenu();\r\n    };\r\n  });\r\n\r\n\r\n  const tossApple = () => {\r\n    let num = Number(parseInt(Math.random() * unit*unit));\r\n    const grids = Array.from(document.querySelectorAll('#gameboard>div'));\r\n    if (snake.every(piece => piece.num != num) && !grids[num].classList.contains('border')) {\r\n      apple.slot = num;\r\n      grids[num].appendChild(apple);\r\n      return\r\n    } else {\r\n      tossApple();\r\n      return\r\n    };\r\n  };\r\n\r\n  const arrowFn = (e) => {\r\n    if (e.target.localName != 'button') {\r\n      switchDirection(e.target.parentElement);\r\n    } else {\r\n      switchDirection(e.target);\r\n    }\r\n  };\r\n\r\n  const startGame = ({newLevel, initialSnake, initialDirection, newUnit, initialTurnPoints, newMaxScore}) => {\r\n    maxScore = newMaxScore;\r\n    currentLevel = newLevel;\r\n    snake = initialSnake;\r\n    direction = initialDirection;\r\n    unit = newUnit;\r\n    if (initialTurnPoints) {\r\n      turnPoints = initialTurnPoints;\r\n    };\r\n    window.addEventListener('keydown', switchDirection);\r\n    arrows.forEach(arrow => {\r\n      arrow.addEventListener('click', arrowFn);\r\n    });\r\n\r\n    const grids = Array.from(document.querySelectorAll('#gameboard>div'));\r\n    const borderGrids = Array.from(document.querySelectorAll('.border'));\r\n\r\n    if (music == 'ON' && !musicPlaying) {\r\n      let allMusic = chill.concat(manlyTunes);\r\n      allMusic.forEach(song => {\r\n        song.addEventListener('ended', startMusic);\r\n      });\r\n      window.addEventListener('keydown', skipMusic);\r\n      window.addEventListener('keydown', playDaBeast);\r\n      skip.addEventListener('click', skipMusicBtn);\r\n      quality.addEventListener('click', playDaBeastBtn);\r\n      startMusic();\r\n    };\r\n\r\n    tossApple();\r\n\r\n    let move = setInterval(() => {\r\n      if (prevDirection != direction) {\r\n        turnPoints.push({num: 0, dir: direction});\r\n      };\r\n\r\n      const lastNum = snake[snake.length - 1].num;\r\n      const lastDir = snake[snake.length - 1].dir;\r\n\r\n      if (turnPoints.length > 0) {\r\n        turnPoints.forEach(point => {\r\n          snake[point.num].dir = point.dir;\r\n          point.num++;\r\n        });\r\n      };\r\n\r\n      snake.forEach(piece => {\r\n        switch(piece.dir) {\r\n          case 'left':\r\n            piece.num--;\r\n            break;\r\n            \r\n          case 'up':\r\n            piece.num = piece.num - unit;\r\n            break;\r\n            \r\n          case 'right':\r\n            piece.num++;\r\n            break;\r\n            \r\n          case 'down':\r\n            piece.num = piece.num + unit;\r\n            break;\r\n        };\r\n      });\r\n\r\n      if (snake.some(piece => {\r\n        if (piece != snake[0]) {\r\n          return piece.num == snake[0].num\r\n        }\r\n      }) || borderGrids.some(grid => grid.slot == snake[0].num)) {\r\n        clearInterval(move);\r\n        gameLost();\r\n        return\r\n      };\r\n\r\n      if (grids[snake[0].num] == grids[apple.slot]) {\r\n        score++;\r\n        scoreCounter.textContent = `Score: ${maxScore}/${score}`;\r\n        grids[apple.slot].removeChild(apple);\r\n\r\n        if (maxScore == score) {\r\n          clearInterval(move);\r\n          gameWon();\r\n          return\r\n        };\r\n\r\n        snake.push({num: lastNum, dir: lastDir});\r\n\r\n        if (turnPoints.length > 0 && turnPoints[0].num == snake.length - 1) {\r\n          snake[snake.length - 1].dir = turnPoints[0].dir;\r\n          turnPoints[0].num++;\r\n        };\r\n\r\n        tossApple();\r\n      };\r\n      \r\n      if (turnPoints.length > 0 && turnPoints[0].num > snake.length - 1) {\r\n        turnPoints = turnPoints.slice(1, turnPoints.length);\r\n      };\r\n      \r\n      grids.forEach(grid => {\r\n        grid.style.backgroundColor = 'white';\r\n      });\r\n      borderGrids.forEach(grid => grid.style.backgroundColor = 'orange');\r\n\r\n      snake.forEach(piece => {\r\n        grids[piece.num].style.backgroundColor = 'rgb(0, 97, 0)';\r\n      });\r\n      grids[snake[0].num].style.backgroundColor = 'rgb(0, 187, 0)';\r\n\r\n      prevDirection = direction;\r\n    }, speed);\r\n  };\r\n\r\n  const switchDirection = (e) => {\r\n    if ((prevDirection === 'down' || prevDirection === 'up') && (e.keyCode === 37 || e.slot == 'left')) {\r\n      direction = 'left';\r\n    }\r\n    \r\n    if ((prevDirection === 'down' || prevDirection === 'up') && (e.keyCode === 39 || e.slot == 'right')) {\r\n      direction = 'right';\r\n    }\r\n    \r\n    if ((prevDirection === 'left' || prevDirection === 'right') && (e.keyCode === 38 || e.slot == 'up')) {\r\n      direction = 'up';\r\n    }\r\n    \r\n    if ((prevDirection === 'left' || prevDirection === 'right') && (e.keyCode === 40 || e.slot == 'down')) {\r\n      direction = 'down';\r\n    }\r\n  };\r\n\r\n  const setMusic = () => {\r\n    if (music == 'ON') {\r\n      music = 'OFF';\r\n      if (musicPlaying) {\r\n        prevSong.pause();\r\n        prevSong.currentTime = 0;\r\n        prevSong = '';\r\n        musicPlaying = false;\r\n        window.removeEventListener('keydown', skipMusic);\r\n        window.removeEventListener('keydown', playDaBeast);\r\n        skip.removeEventListener('click', skipMusicBtn);\r\n        quality.removeEventListener('click', playDaBeastBtn);\r\n      };\r\n      muteBtn.style.backgroundColor = '#950000';\r\n    } else {\r\n      music = 'ON';\r\n      if (snake != 'empty') {\r\n        window.addEventListener('keydown', skipMusic);\r\n        window.addEventListener('keydown', playDaBeast);\r\n        skip.addEventListener('click', skipMusicBtn);\r\n        quality.addEventListener('click', playDaBeastBtn);\r\n        startMusic();\r\n      };\r\n      muteBtn.style.backgroundColor = '';\r\n    };\r\n  };\r\n\r\n  const playDaBeastBtn = () => {\r\n    if (difficulty > 1 && prevSong != manlyTunes[1]) {\r\n      prevSong.pause();\r\n      prevSong.currentTime = 0;\r\n      prevSong = manlyTunes[1];\r\n      manlyTunes[1].play();\r\n    };\r\n  };\r\n\r\n  const playDaBeast = (e) => {\r\n    if (e.keyCode == 81 && difficulty > 1 && prevSong != manlyTunes[1]) {\r\n      prevSong.pause();\r\n      prevSong.currentTime = 0;\r\n      prevSong = manlyTunes[1];\r\n      manlyTunes[1].play();\r\n    };\r\n  };\r\n\r\n  const stopMusic = () => {\r\n    if (prevSong.duration > 0 && !prevSong.paused) {\r\n    prevSong.pause();\r\n    prevSong.currentTime = 0;\r\n    prevSong = '';\r\n    musicPlaying = false;\r\n    window.removeEventListener('keydown', skipMusic);\r\n    window.removeEventListener('keydown', playDaBeast);\r\n    skip.removeEventListener('click', skipMusicBtn);\r\n    quality.removeEventListener('click', playDaBeastBtn);\r\n    }\r\n  };\r\n\r\n  const skipMusicBtn = () => {\r\n    if (prevSong) {\r\n      prevSong.pause();\r\n      prevSong.currentTime = 0;\r\n      startMusic();\r\n    };\r\n  };\r\n\r\n  const skipMusic = (e) => {\r\n    if (e.keyCode == 77 && prevSong) {\r\n      prevSong.pause();\r\n      prevSong.currentTime = 0;\r\n      startMusic();\r\n    };\r\n  };\r\n\r\n  const startMusic = () => {\r\n    let num;\r\n    if (difficulty <= 1) {\r\n      num = Number(parseInt(Math.random() * 12));\r\n      if (prevSong != chill[num]) {\r\n        chill[num].play();\r\n        prevSong = chill[num];\r\n      } else {\r\n        startMusic();\r\n      }\r\n    } else if (difficulty > 1) {\r\n      num = Number(parseInt(Math.random() * 4));\r\n      if (prevSong != manlyTunes[num]) {\r\n        manlyTunes[num].play();\r\n        prevSong = manlyTunes[num];\r\n      } else {\r\n        startMusic();\r\n      }\r\n    };\r\n    musicPlaying = true;\r\n  };\r\n\r\n  const setDifficulty = (newDifficulty) => {\r\n    difficulty = newDifficulty;\r\n  };\r\n\r\n  const setSpeed = (newSpeed) => {\r\n    speed = newSpeed;\r\n  };\r\n\r\n  const gameWon = () => {\r\n    gameWonBox.style.display = 'flex';\r\n    window.removeEventListener('keydown', switchDirection);\r\n    arrows.forEach(arrow => {\r\n      arrow.removeEventListener('click', arrowFn);\r\n    });\r\n    _menu__WEBPACK_IMPORTED_MODULE_1__[\"default\"].unlockLevels(currentLevel);\r\n  };\r\n\r\n  const gameLost = () => {\r\n    gameLostBox.style.display = 'flex';\r\n    window.removeEventListener('keydown', switchDirection);\r\n    arrows.forEach(arrow => {\r\n      arrow.removeEventListener('click', arrowFn);\r\n    });\r\n    window.addEventListener('keydown', keydownFn);\r\n  };\r\n\r\n  return {\r\n    startGame,\r\n    setSpeed,\r\n    setDifficulty,\r\n    setMusic\r\n  }\r\n};\r\n\r\nconst engine = e();\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (engine);\n\n//# sourceURL=webpack://snake-game/./src/components/engine.js?");

/***/ }),

/***/ "./src/components/loadLevel.js":
/*!*************************************!*\
  !*** ./src/components/loadLevel.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./engine */ \"./src/components/engine.js\");\n\r\n\r\nconst ll = () => {\r\n  const gameboard = document.querySelector('#gameboard');\r\n  const pressKey = document.querySelector('#press-key');\r\n  const scoreCounter = document.querySelector('#score>p');\r\n  const arrows = document.querySelectorAll('.arrows button');\r\n  let pack = {};\r\n\r\n  const load = (level, difNum) => {\r\n    pack.difficulty = difNum;\r\n    switch(level) {\r\n      case 0:\r\n        pack.newLevel = 0;\r\n        You();\r\n        break;\r\n        \r\n      case 1:\r\n        pack.newLevel = 1;\r\n        Are();\r\n        break;\r\n        \r\n      case 2:\r\n        pack.newLevel = 2;\r\n        Beautiful();\r\n        break;\r\n    }\r\n  };\r\n\r\n  const You = () => {\r\n    pack.newUnit = 12;\r\n\r\n    gameboard.innerHTML = '';\r\n    pack.obsticles = [27, 28, 33, 34, 39, 46, 53, 56, 89, 92, 99, 106, 111, 112, 117, 118];\r\n\r\n    pack.initialSnake = [{num: 64, dir: 'right'}, {num: 63, dir: 'right'}, {num: 62, dir: 'right'}, {num: 61, dir: 'right'}];\r\n\r\n    pack.initialDirection = 'right';\r\n\r\n    if (pack.difficulty <= 1) {\r\n      pack.newMaxScore = 20;\r\n    };\r\n\r\n    if (pack.difficulty > 1) {\r\n      pack.newMaxScore = 25;\r\n    };\r\n\r\n    for (let i = 1; i <= pack.newUnit*pack.newUnit; i++) {\r\n      const div = document.createElement('div');\r\n      if ((i <= pack.newUnit && i > 0) || (i > pack.newUnit*pack.newUnit-pack.newUnit && i <= pack.newUnit*pack.newUnit) || i % pack.newUnit == 0 || (i - 1) % pack.newUnit == 0 || pack.obsticles.some(obsticle => obsticle == i)) {\r\n        div.classList.add('border');\r\n        div.style.backgroundColor = 'orange';\r\n      } else if (!pack.initialSnake.some(piece => piece.num == i - 1)){\r\n        div.classList.add('inside');\r\n        div.style.backgroundColor = 'white';\r\n      } else if (pack.initialSnake[0].num == i - 1) {\r\n        div.style.backgroundColor = 'rgb(0, 187, 0)';\r\n      } else {\r\n        div.style.backgroundColor = 'rgb(0, 97, 0)';\r\n      };\r\n      div.slot = i - 1;\r\n      gameboard.appendChild(div);\r\n    };\r\n\r\n    gameboard.style.cssText = `\r\n      display: grid;\r\n      grid-template-columns: repeat(${pack.newUnit}, 1fr);\r\n      grid-template-rows: repeat(${pack.newUnit}, 1fr);\r\n    `;\r\n\r\n    scoreCounter.textContent = `Score: ${pack.newMaxScore}/0`;\r\n\r\n    pressKey.style.display = 'block';\r\n\r\n    window.addEventListener('keydown', keyPressed);\r\n    arrows.forEach(arrow => {\r\n      arrow.addEventListener('click', keyPressed);\r\n    });\r\n  };\r\n\r\n  const Are = () => {\r\n    pack.newUnit = 13;\r\n\r\n    gameboard.innerHTML = '';\r\n    pack.obsticles = [70, 71, 73, 74, 58, 60, 96, 97, 99, 100, 110, 112, 15, 25, 145, 155, 42, 30, 36, 50, 120, 134, 140, 128, 67, 80, 81, 93, 77, 90, 89, 103, 151, 150, 149, 137, 19, 20, 21, 33];\r\n\r\n    pack.initialSnake = [{num: 86, dir: 'right'}, {num: 85, dir: 'right'}, {num: 84, dir: 'right'}, {num: 83, dir: 'right'}, {num: 82, dir: 'right'}];\r\n\r\n    pack.initialDirection = 'right';\r\n\r\n    if (pack.difficulty <= 1) {\r\n      pack.newMaxScore = 20;\r\n    };\r\n\r\n    if (pack.difficulty > 1) {\r\n      pack.newMaxScore = 25;\r\n    };\r\n\r\n    for (let i = 1; i <= pack.newUnit*pack.newUnit; i++) {\r\n      const div = document.createElement('div');\r\n      if ((i <= pack.newUnit && i > 0) || (i > pack.newUnit*pack.newUnit-pack.newUnit && i <= pack.newUnit*pack.newUnit) || i % pack.newUnit == 0 || (i - 1) % pack.newUnit == 0 || pack.obsticles.some(obsticle => obsticle == i)) {\r\n        div.classList.add('border');\r\n        div.style.backgroundColor = 'orange';\r\n      } else if (!pack.initialSnake.some(piece => piece.num == i - 1)){\r\n        div.classList.add('inside');\r\n        div.style.backgroundColor = 'white';\r\n      } else if (pack.initialSnake[0].num == i - 1) {\r\n        div.style.backgroundColor = 'rgb(0, 187, 0)';\r\n      } else {\r\n        div.style.backgroundColor = 'rgb(0, 97, 0)';\r\n      };\r\n      div.slot = i - 1;\r\n      gameboard.appendChild(div);\r\n    };\r\n\r\n    gameboard.style.cssText = `\r\n      display: grid;\r\n      grid-template-columns: repeat(${pack.newUnit}, 1fr);\r\n      grid-template-rows: repeat(${pack.newUnit}, 1fr);\r\n    `;\r\n\r\n    scoreCounter.textContent = `Score: ${pack.newMaxScore}/0`;\r\n\r\n    pressKey.style.display = 'block';\r\n\r\n    window.addEventListener('keydown', keyPressed);\r\n    arrows.forEach(arrow => {\r\n      arrow.addEventListener('click', keyPressed);\r\n    });\r\n  };\r\n\r\n  const Beautiful = () => {\r\n    pack.newUnit = 16;\r\n\r\n    gameboard.innerHTML = '';\r\n    pack.obsticles = [86, 91, 166, 171, 35, 46, 211, 222, 21, 28, 66, 79, 178, 229, 236, 191, 52, 53, 68, 60, 61, 77, 180, 196, 197, 204, 205, 189, 71, 87, 101, 102, 74, 90, 107, 108, 155, 156, 170, 186, 183, 167, 150, 149, 120, 121, 136, 137, 40, 41, 115, 131, 126, 142, 216, 217];\r\n\r\n    pack.initialSnake = [{num: 87, dir: 'up'}, {num: 103, dir: 'up'}, {num: 102, dir: 'right'}, {num: 118, dir: 'up'}, {num: 134, dir: 'up'}, {num: 150, dir: 'up'}];\r\n\r\n    pack.initialTurnPoints = [{num: 2, dir: 'right'}, {num: 1, dir: 'up'}];\r\n\r\n    pack.initialDirection = 'up';\r\n\r\n    if (pack.difficulty <= 1) {\r\n      pack.newMaxScore = 25;\r\n    };\r\n\r\n    if (pack.difficulty > 1) {\r\n      pack.newMaxScore = 30;\r\n    };\r\n\r\n    for (let i = 1; i <= pack.newUnit*pack.newUnit; i++) {\r\n      const div = document.createElement('div');\r\n      if ((i <= pack.newUnit && i > 0) || (i > pack.newUnit*pack.newUnit-pack.newUnit && i <= pack.newUnit*pack.newUnit) || i % pack.newUnit == 0 || (i - 1) % pack.newUnit == 0 || pack.obsticles.some(obsticle => obsticle == i)) {\r\n        div.classList.add('border');\r\n        div.style.backgroundColor = 'orange';\r\n      } else if (!pack.initialSnake.some(piece => piece.num == i - 1)){\r\n        div.classList.add('inside');\r\n        div.style.backgroundColor = 'white';\r\n      } else if (pack.initialSnake[0].num == i - 1) {\r\n        div.style.backgroundColor = 'rgb(0, 187, 0)';\r\n      } else {\r\n        div.style.backgroundColor = 'rgb(0, 97, 0)';\r\n      };\r\n      div.slot = i - 1;\r\n      gameboard.appendChild(div);\r\n    };\r\n\r\n    gameboard.style.cssText = `\r\n      display: grid;\r\n      grid-template-columns: repeat(${pack.newUnit}, 1fr);\r\n      grid-template-rows: repeat(${pack.newUnit}, 1fr);\r\n    `;\r\n\r\n    scoreCounter.textContent = `Score: ${pack.newMaxScore}/0`;\r\n\r\n    pressKey.style.display = 'block';\r\n\r\n    window.addEventListener('keydown', keyPressed);\r\n    arrows.forEach(arrow => {\r\n      arrow.addEventListener('click', keyPressed);\r\n    });\r\n  };\r\n\r\n  function keyPressed() {\r\n    window.removeEventListener('keydown', keyPressed);\r\n    arrows.forEach(arrow => {\r\n      arrow.removeEventListener('click', keyPressed);\r\n    });\r\n    pressKey.style.display = 'none';\r\n    _engine__WEBPACK_IMPORTED_MODULE_0__[\"default\"].startGame({newLevel: pack.newLevel, initialSnake: pack.initialSnake, initialDirection: pack.initialDirection, newUnit: pack.newUnit, initialTurnPoints: pack.initialTurnPoints, newMaxScore: pack.newMaxScore});\r\n  };\r\n\r\n  return {\r\n    load,\r\n    You,\r\n    Are,\r\n    Beautiful\r\n  }\r\n};\r\n\r\nconst loadLevel = ll();\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (loadLevel);\n\n//# sourceURL=webpack://snake-game/./src/components/loadLevel.js?");

/***/ }),

/***/ "./src/components/menu.js":
/*!********************************!*\
  !*** ./src/components/menu.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _loadLevel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadLevel */ \"./src/components/loadLevel.js\");\n/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./engine */ \"./src/components/engine.js\");\n\r\n\r\n\r\nconst lm = () => {\r\n  const gameboard = document.querySelector('#gameboard');\r\n  let newSpeed = 350;\r\n  let difNum = 0;\r\n  let levels = [{name: 'You', difficulty: ['unlocked', 'unlocked', 'unlocked', 'unlocked']}, {name: 'Are'}, {name: 'Beautiful'}];\r\n  levels.forEach(level => {\r\n    if (level != levels[0]) {\r\n      level.difficulty = ['locked', 'locked', 'locked', 'locked'];\r\n    };\r\n  });\r\n\r\n  const unlockLevels = (currentLevel) => {\r\n    let nextLevel = currentLevel + 1;\r\n    if (levels[nextLevel]) {\r\n      for (let i = 0; i <= difNum; i++) {\r\n        levels[nextLevel].difficulty[i] = 'unlocked';\r\n      };\r\n    };\r\n    console.log(levels);\r\n  };\r\n\r\n  const defaultMenu = () => {\r\n    gameboard.style.cssText = `\r\n      display: flex;\r\n      flex-direction: column;\r\n      align-items: center;\r\n      justify-content: center;\r\n      gap: 5px;\r\n    `;\r\n    gameboard.innerHTML = '';\r\n\r\n    const title = document.createElement('h1');\r\n    const newGameBtn = document.createElement('button');\r\n    const chooseLevelBtn = document.createElement('button');\r\n    const setDifficultyBtn = document.createElement('button');\r\n    const infoButton = document.createElement('button');\r\n\r\n    infoButton.classList.add('info-button');\r\n\r\n    title.textContent = 'Sneaky Snake Snack';\r\n\r\n    newGameBtn.textContent = 'New Game';\r\n    newGameBtn.addEventListener('click', () => {\r\n      _loadLevel__WEBPACK_IMPORTED_MODULE_0__[\"default\"].load(0, difNum);\r\n    });\r\n    \r\n    chooseLevelBtn.textContent = 'Levels';\r\n    chooseLevelBtn.addEventListener('click', () => {\r\n      chooseLevel();\r\n    });\r\n\r\n    setDifficultyBtn.textContent = 'Difficulty';\r\n    setDifficultyBtn.addEventListener('click', () => {\r\n      setDifficulty();\r\n    });\r\n\r\n    infoButton.textContent = 'Info';\r\n    infoButton.addEventListener('click', () => {\r\n      info();\r\n    });\r\n\r\n    gameboard.appendChild(title);\r\n    gameboard.appendChild(newGameBtn);\r\n    gameboard.appendChild(chooseLevelBtn);\r\n    gameboard.appendChild(setDifficultyBtn);\r\n    gameboard.appendChild(infoButton);\r\n  };\r\n\r\n  const info = () => {\r\n    gameboard.innerHTML = '';\r\n\r\n    const instructions = document.querySelector('#instructions');\r\n    const div = document.createElement('div');\r\n\r\n    instructions.id = 'menu-instructions';\r\n\r\n    div.classList.add('scroll');\r\n\r\n    div.appendChild(instructions);\r\n    gameboard.appendChild(div);\r\n  };\r\n\r\n  const chooseLevel = () => {\r\n    gameboard.innerHTML = '';\r\n\r\n    const youBtn = document.createElement('button');\r\n    const areBtn = document.createElement('button');\r\n    const beautifulBtn = document.createElement('button');\r\n    const backToMenuBtn = document.createElement('button');\r\n\r\n    backToMenuBtn.textContent = 'Back To Menu';\r\n\r\n    const levelArray = [];\r\n    levelArray.push(youBtn, areBtn, beautifulBtn);\r\n    \r\n    for (let i = 0; i < levelArray.length; i++) {\r\n      if (levels[i].difficulty[difNum] != 'locked') {\r\n        levelArray[i].textContent = levels[i].name;\r\n        levelArray[i].addEventListener('click', () => {\r\n          _loadLevel__WEBPACK_IMPORTED_MODULE_0__[\"default\"].load(i, difNum);\r\n        });\r\n      } else {\r\n        levelArray[i].textContent = 'Locked';\r\n      };\r\n    };\r\n\r\n    if (levels[2].difficulty[3] == 'unlocked') {\r\n      beautifulBtn.textContent = 'Crazy';\r\n    };\r\n\r\n    backToMenuBtn.addEventListener('click', () => {\r\n      defaultMenu();\r\n    });\r\n\r\n    gameboard.appendChild(youBtn);\r\n    gameboard.appendChild(areBtn);\r\n    gameboard.appendChild(beautifulBtn);\r\n    gameboard.appendChild(backToMenuBtn);\r\n  };\r\n\r\n  const setDifficulty = () => {\r\n    gameboard.innerHTML = '';\r\n\r\n    const easyBtn = document.createElement('button');\r\n    const normalBtn = document.createElement('button');\r\n    const hardBtn = document.createElement('button');\r\n    const hardcoreBtn = document.createElement('button');\r\n    const okBtn = document.createElement('button');\r\n\r\n    easyBtn.textContent = 'Easy';\r\n    normalBtn.textContent = 'Normal';\r\n    hardBtn.textContent = 'Hard';\r\n    hardcoreBtn.textContent = 'Hardcore';\r\n    okBtn.textContent = 'Ok';\r\n\r\n    easyBtn.onclick = () => {\r\n      newSpeed = 350;\r\n      difNum = 0;\r\n      buttonArray.forEach(button => button.style.outline = '');\r\n      easyBtn.style.outline = '2px solid black';\r\n    };\r\n    normalBtn.onclick = () => {\r\n      newSpeed = 300;\r\n      difNum = 1;\r\n      buttonArray.forEach(button => button.style.outline = '');\r\n      normalBtn.style.outline = '2px solid black';\r\n    };\r\n    hardBtn.onclick = () => {\r\n      newSpeed = 250;\r\n      difNum = 2;\r\n      buttonArray.forEach(button => button.style.outline = '');\r\n      hardBtn.style.outline = '2px solid black';\r\n    };\r\n    hardcoreBtn.onclick = () => {\r\n      newSpeed = 200;\r\n      difNum = 3;\r\n      buttonArray.forEach(button => button.style.outline = '');\r\n      hardcoreBtn.style.outline = '2px solid black';\r\n    };\r\n    okBtn.onclick = () => {\r\n      _engine__WEBPACK_IMPORTED_MODULE_1__[\"default\"].setSpeed(newSpeed);\r\n      _engine__WEBPACK_IMPORTED_MODULE_1__[\"default\"].setDifficulty(difNum);\r\n      defaultMenu();\r\n    };\r\n\r\n    const buttonArray = [];\r\n    buttonArray.push(easyBtn, normalBtn, hardBtn, hardcoreBtn);\r\n\r\n    gameboard.appendChild(easyBtn);\r\n    gameboard.appendChild(normalBtn);\r\n    gameboard.appendChild(hardBtn);\r\n    gameboard.appendChild(hardcoreBtn);\r\n    gameboard.appendChild(okBtn);\r\n    \r\n    switch(difNum) {\r\n      case 0:\r\n        easyBtn.style.outline = '2px solid black';\r\n        break;\r\n        \r\n      case 1:\r\n        normalBtn.style.outline = '2px solid black';\r\n        break;\r\n        \r\n      case 2:\r\n        hardBtn.style.outline = '2px solid black';\r\n        break;\r\n        \r\n      case 3:\r\n        hardcoreBtn.style.outline = '2px solid black';\r\n        break;\r\n    };\r\n  };\r\n\r\n  return {\r\n    defaultMenu,\r\n    unlockLevels\r\n  }\r\n}\r\n\r\nconst loadMenu = lm();\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (loadMenu);\n\n//# sourceURL=webpack://snake-game/./src/components/menu.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _components_loadLevel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components/loadLevel */ \"./src/components/loadLevel.js\");\n/* harmony import */ var _components_engine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/engine */ \"./src/components/engine.js\");\n/* harmony import */ var _components_menu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/menu */ \"./src/components/menu.js\");\n\r\n\r\n\r\n\r\nwindow.addEventListener('load', _components_menu__WEBPACK_IMPORTED_MODULE_2__[\"default\"].defaultMenu);\r\n\r\n\r\nconst muteBtn = document.querySelector('#mute-button');\r\nmuteBtn.onclick = _components_engine__WEBPACK_IMPORTED_MODULE_1__[\"default\"].setMusic;\r\n\r\nconst kiddingText = document.querySelector('#kidding');\r\nconst clickMeBtn = document.querySelector('#clickme');\r\nclickMeBtn.onclick = () => {\r\n  clickMeBtn.style.display = 'none';\r\n  kiddingText.style.display = 'block';\r\n};\n\n//# sourceURL=webpack://snake-game/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;